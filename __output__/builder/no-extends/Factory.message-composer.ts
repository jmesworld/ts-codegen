/**
* This file was automatically generated by @cosmwasm/ts-codegen@latest.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { MsgExecuteContractEncodeObject } from "cosmwasm";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { AdminAddrResponse, CodeIdResponse, CodeIdType, Uint128, Binary, CreateWalletMsg, Guardians, MultiSig, Coin, Cw20Coin, ExecuteMsg, Addr, ProxyMigrationTxMsg, WalletAddr, CanonicalAddr, RelayTransaction, FeeResponse, GovecAddrResponse, InstantiateMsg, QueryMsg, WalletQueryPrefix, Duration, StakingOptions, WalletInfo, ContractVersion, WalletsOfResponse, WalletsResponse } from "./Factory.types";
export interface FactoryMessage {
  contractAddress: string;
  sender: string;
  createWallet: ({
    createWalletMsg
  }: {
    createWalletMsg: CreateWalletMsg;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateProxyUser: ({
    newUser,
    oldUser
  }: {
    newUser: Addr;
    oldUser: Addr;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  migrateWallet: ({
    migrationMsg,
    walletAddress
  }: {
    migrationMsg: ProxyMigrationTxMsg;
    walletAddress: WalletAddr;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateCodeId: ({
    newCodeId,
    ty
  }: {
    newCodeId: number;
    ty: CodeIdType;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateWalletFee: ({
    newFee
  }: {
    newFee: Coin;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateGovecAddr: ({
    addr
  }: {
    addr: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateAdmin: ({
    addr
  }: {
    addr: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class FactoryMessageComposer implements FactoryMessage {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.createWallet = this.createWallet.bind(this);
    this.updateProxyUser = this.updateProxyUser.bind(this);
    this.migrateWallet = this.migrateWallet.bind(this);
    this.updateCodeId = this.updateCodeId.bind(this);
    this.updateWalletFee = this.updateWalletFee.bind(this);
    this.updateGovecAddr = this.updateGovecAddr.bind(this);
    this.updateAdmin = this.updateAdmin.bind(this);
  }

  createWallet = ({
    createWalletMsg
  }: {
    createWalletMsg: CreateWalletMsg;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          create_wallet: {
            create_wallet_msg: createWalletMsg
          }
        })),
        funds
      })
    };
  };
  updateProxyUser = ({
    newUser,
    oldUser
  }: {
    newUser: Addr;
    oldUser: Addr;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_proxy_user: {
            new_user: newUser,
            old_user: oldUser
          }
        })),
        funds
      })
    };
  };
  migrateWallet = ({
    migrationMsg,
    walletAddress
  }: {
    migrationMsg: ProxyMigrationTxMsg;
    walletAddress: WalletAddr;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          migrate_wallet: {
            migration_msg: migrationMsg,
            wallet_address: walletAddress
          }
        })),
        funds
      })
    };
  };
  updateCodeId = ({
    newCodeId,
    ty
  }: {
    newCodeId: number;
    ty: CodeIdType;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_code_id: {
            new_code_id: newCodeId,
            ty
          }
        })),
        funds
      })
    };
  };
  updateWalletFee = ({
    newFee
  }: {
    newFee: Coin;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_wallet_fee: {
            new_fee: newFee
          }
        })),
        funds
      })
    };
  };
  updateGovecAddr = ({
    addr
  }: {
    addr: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_govec_addr: {
            addr
          }
        })),
        funds
      })
    };
  };
  updateAdmin = ({
    addr
  }: {
    addr: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_admin: {
            addr
          }
        })),
        funds
      })
    };
  };
}